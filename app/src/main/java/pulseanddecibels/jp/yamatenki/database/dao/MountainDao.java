package pulseanddecibels.jp.yamatenki.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MOUNTAIN.
*/
public class MountainDao extends AbstractDao<Mountain, Long> {

    public static final String TABLENAME = "MOUNTAIN";

    /**
     * Properties of entity Mountain.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Yid = new Property(1, String.class, "yid", false, "YID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property TitleExt = new Property(3, String.class, "titleExt", false, "TITLE_EXT");
        public final static Property TitleSplitted_1 = new Property(4, String.class, "titleSplitted_1", false, "TITLE_SPLITTED_1");
        public final static Property TitleSplitted_2 = new Property(5, String.class, "titleSplitted_2", false, "TITLE_SPLITTED_2");
        public final static Property TitleEnglish = new Property(6, String.class, "titleEnglish", false, "TITLE_ENGLISH");
        public final static Property TitleSplittedEnglish_1 = new Property(7, String.class, "titleSplittedEnglish_1", false, "TITLE_SPLITTED_ENGLISH_1");
        public final static Property TitleSplittedEnglish_2 = new Property(8, String.class, "titleSplittedEnglish_2", false, "TITLE_SPLITTED_ENGLISH_2");
        public final static Property Kana = new Property(9, String.class, "kana", false, "KANA");
        public final static Property ReferenceCity = new Property(10, String.class, "referenceCity", false, "REFERENCE_CITY");
        public final static Property ReferenceCityEnglish = new Property(11, String.class, "referenceCityEnglish", false, "REFERENCE_CITY_ENGLISH");
        public final static Property PrefectureId = new Property(12, long.class, "prefectureId", false, "PREFECTURE_ID");
        public final static Property AreaId = new Property(13, long.class, "areaId", false, "AREA_ID");
        public final static Property Height = new Property(14, Integer.class, "height", false, "HEIGHT");
        public final static Property TopMountain = new Property(15, Boolean.class, "topMountain", false, "TOP_MOUNTAIN");
    }

    private DaoSession daoSession;


    public MountainDao(DaoConfig config) {
        super(config);
    }
    
    public MountainDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MOUNTAIN' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'YID' TEXT," + // 1: yid
                "'TITLE' TEXT," + // 2: title
                "'TITLE_EXT' TEXT," + // 3: titleExt
                "'TITLE_SPLITTED_1' TEXT," + // 4: titleSplitted_1
                "'TITLE_SPLITTED_2' TEXT," + // 5: titleSplitted_2
                "'TITLE_ENGLISH' TEXT," + // 6: titleEnglish
                "'TITLE_SPLITTED_ENGLISH_1' TEXT," + // 7: titleSplittedEnglish_1
                "'TITLE_SPLITTED_ENGLISH_2' TEXT," + // 8: titleSplittedEnglish_2
                "'KANA' TEXT," + // 9: kana
                "'REFERENCE_CITY' TEXT," + // 10: referenceCity
                "'REFERENCE_CITY_ENGLISH' TEXT," + // 11: referenceCityEnglish
                "'PREFECTURE_ID' INTEGER NOT NULL ," + // 12: prefectureId
                "'AREA_ID' INTEGER NOT NULL ," + // 13: areaId
                "'HEIGHT' INTEGER," + // 14: height
                "'TOP_MOUNTAIN' INTEGER);"); // 15: topMountain
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MOUNTAIN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Mountain entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String yid = entity.getYid();
        if (yid != null) {
            stmt.bindString(2, yid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String titleExt = entity.getTitleExt();
        if (titleExt != null) {
            stmt.bindString(4, titleExt);
        }
 
        String titleSplitted_1 = entity.getTitleSplitted_1();
        if (titleSplitted_1 != null) {
            stmt.bindString(5, titleSplitted_1);
        }
 
        String titleSplitted_2 = entity.getTitleSplitted_2();
        if (titleSplitted_2 != null) {
            stmt.bindString(6, titleSplitted_2);
        }
 
        String titleEnglish = entity.getTitleEnglish();
        if (titleEnglish != null) {
            stmt.bindString(7, titleEnglish);
        }
 
        String titleSplittedEnglish_1 = entity.getTitleSplittedEnglish_1();
        if (titleSplittedEnglish_1 != null) {
            stmt.bindString(8, titleSplittedEnglish_1);
        }
 
        String titleSplittedEnglish_2 = entity.getTitleSplittedEnglish_2();
        if (titleSplittedEnglish_2 != null) {
            stmt.bindString(9, titleSplittedEnglish_2);
        }
 
        String kana = entity.getKana();
        if (kana != null) {
            stmt.bindString(10, kana);
        }
 
        String referenceCity = entity.getReferenceCity();
        if (referenceCity != null) {
            stmt.bindString(11, referenceCity);
        }
 
        String referenceCityEnglish = entity.getReferenceCityEnglish();
        if (referenceCityEnglish != null) {
            stmt.bindString(12, referenceCityEnglish);
        }
        stmt.bindLong(13, entity.getPrefectureId());
        stmt.bindLong(14, entity.getAreaId());
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(15, height);
        }
 
        Boolean topMountain = entity.getTopMountain();
        if (topMountain != null) {
            stmt.bindLong(16, topMountain ? 1l: 0l);
        }
    }

    @Override
    protected void attachEntity(Mountain entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Mountain readEntity(Cursor cursor, int offset) {
        Mountain entity = new Mountain( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // yid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // titleExt
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // titleSplitted_1
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // titleSplitted_2
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // titleEnglish
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // titleSplittedEnglish_1
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // titleSplittedEnglish_2
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // kana
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // referenceCity
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // referenceCityEnglish
            cursor.getLong(offset + 12), // prefectureId
            cursor.getLong(offset + 13), // areaId
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // height
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0 // topMountain
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Mountain entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setYid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitleExt(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitleSplitted_1(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitleSplitted_2(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTitleEnglish(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTitleSplittedEnglish_1(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTitleSplittedEnglish_2(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setKana(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setReferenceCity(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setReferenceCityEnglish(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPrefectureId(cursor.getLong(offset + 12));
        entity.setAreaId(cursor.getLong(offset + 13));
        entity.setHeight(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setTopMountain(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Mountain entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Mountain entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getAreaDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getPrefectureDao().getAllColumns());
            builder.append(" FROM MOUNTAIN T");
            builder.append(" LEFT JOIN AREA T0 ON T.'AREA_ID'=T0.'_id'");
            builder.append(" LEFT JOIN PREFECTURE T1 ON T.'PREFECTURE_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Mountain loadCurrentDeep(Cursor cursor, boolean lock) {
        Mountain entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Area area = loadCurrentOther(daoSession.getAreaDao(), cursor, offset);
         if(area != null) {
            entity.setArea(area);
        }
        offset += daoSession.getAreaDao().getAllColumns().length;

        Prefecture prefecture = loadCurrentOther(daoSession.getPrefectureDao(), cursor, offset);
         if(prefecture != null) {
            entity.setPrefecture(prefecture);
        }

        return entity;    
    }

    public Mountain loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Mountain> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Mountain> list = new ArrayList<Mountain>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Mountain> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Mountain> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

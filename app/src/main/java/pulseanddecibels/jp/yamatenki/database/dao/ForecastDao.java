package pulseanddecibels.jp.yamatenki.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FORECAST.
*/
public class ForecastDao extends AbstractDao<Forecast, Long> {

    public static final String TABLENAME = "FORECAST";

    /**
     * Properties of entity Forecast.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Temperature = new Property(1, Double.class, "temperature", false, "TEMPERATURE");
        public final static Property Precipitation = new Property(2, Double.class, "precipitation", false, "PRECIPITATION");
        public final static Property TotalCloudCover = new Property(3, Double.class, "totalCloudCover", false, "TOTAL_CLOUD_COVER");
        public final static Property MountainStatus = new Property(4, Integer.class, "mountainStatus", false, "MOUNTAIN_STATUS");
        public final static Property DateTime = new Property(5, String.class, "dateTime", false, "DATE_TIME");
        public final static Property MountainId = new Property(6, long.class, "mountainId", false, "MOUNTAIN_ID");
    }

    private DaoSession daoSession;

    private Query<Forecast> mountain_ForecastListQuery;

    public ForecastDao(DaoConfig config) {
        super(config);
    }
    
    public ForecastDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FORECAST' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TEMPERATURE' REAL," + // 1: temperature
                "'PRECIPITATION' REAL," + // 2: precipitation
                "'TOTAL_CLOUD_COVER' REAL," + // 3: totalCloudCover
                "'MOUNTAIN_STATUS' INTEGER," + // 4: mountainStatus
                "'DATE_TIME' TEXT," + // 5: dateTime
                "'MOUNTAIN_ID' INTEGER NOT NULL );"); // 6: mountainId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FORECAST'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Forecast entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindDouble(2, temperature);
        }
 
        Double precipitation = entity.getPrecipitation();
        if (precipitation != null) {
            stmt.bindDouble(3, precipitation);
        }
 
        Double totalCloudCover = entity.getTotalCloudCover();
        if (totalCloudCover != null) {
            stmt.bindDouble(4, totalCloudCover);
        }
 
        Integer mountainStatus = entity.getMountainStatus();
        if (mountainStatus != null) {
            stmt.bindLong(5, mountainStatus);
        }
 
        String dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindString(6, dateTime);
        }
        stmt.bindLong(7, entity.getMountainId());
    }

    @Override
    protected void attachEntity(Forecast entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Forecast readEntity(Cursor cursor, int offset) {
        Forecast entity = new Forecast( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // temperature
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // precipitation
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // totalCloudCover
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // mountainStatus
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dateTime
            cursor.getLong(offset + 6) // mountainId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Forecast entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTemperature(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setPrecipitation(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setTotalCloudCover(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setMountainStatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDateTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMountainId(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Forecast entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Forecast entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "forecastList" to-many relationship of Mountain. */
    public List<Forecast> _queryMountain_ForecastList(long mountainId) {
        synchronized (this) {
            if (mountain_ForecastListQuery == null) {
                QueryBuilder<Forecast> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MountainId.eq(null));
                mountain_ForecastListQuery = queryBuilder.build();
            }
        }
        Query<Forecast> query = mountain_ForecastListQuery.forCurrentThread();
        query.setParameter(0, mountainId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMountainDao().getAllColumns());
            builder.append(" FROM FORECAST T");
            builder.append(" LEFT JOIN MOUNTAIN T0 ON T.'MOUNTAIN_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Forecast loadCurrentDeep(Cursor cursor, boolean lock) {
        Forecast entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Mountain mountain = loadCurrentOther(daoSession.getMountainDao(), cursor, offset);
         if(mountain != null) {
            entity.setMountain(mountain);
        }

        return entity;    
    }

    public Forecast loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Forecast> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Forecast> list = new ArrayList<Forecast>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Forecast> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Forecast> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

package pulseanddecibels.jp.yamatenki.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MY_MEMO.
*/
public class MyMemoDao extends AbstractDao<MyMemo, Long> {

    public static final String TABLENAME = "MY_MEMO";

    /**
     * Properties of entity MyMemo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MountainId = new Property(1, long.class, "mountainId", false, "MOUNTAIN_ID");
        public final static Property DateTimeFrom = new Property(2, Long.class, "dateTimeFrom", false, "DATE_TIME_FROM");
        public final static Property DateTimeUntil = new Property(3, Long.class, "dateTimeUntil", false, "DATE_TIME_UNTIL");
        public final static Property Weather = new Property(4, String.class, "weather", false, "WEATHER");
        public final static Property Rating = new Property(5, Integer.class, "rating", false, "RATING");
        public final static Property Memo = new Property(6, String.class, "memo", false, "MEMO");
    }

    private DaoSession daoSession;


    public MyMemoDao(DaoConfig config) {
        super(config);
    }
    
    public MyMemoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MY_MEMO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MOUNTAIN_ID' INTEGER NOT NULL ," + // 1: mountainId
                "'DATE_TIME_FROM' INTEGER," + // 2: dateTimeFrom
                "'DATE_TIME_UNTIL' INTEGER," + // 3: dateTimeUntil
                "'WEATHER' TEXT," + // 4: weather
                "'RATING' INTEGER," + // 5: rating
                "'MEMO' TEXT);"); // 6: memo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MY_MEMO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MyMemo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMountainId());
 
        Long dateTimeFrom = entity.getDateTimeFrom();
        if (dateTimeFrom != null) {
            stmt.bindLong(3, dateTimeFrom);
        }
 
        Long dateTimeUntil = entity.getDateTimeUntil();
        if (dateTimeUntil != null) {
            stmt.bindLong(4, dateTimeUntil);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(5, weather);
        }
 
        Integer rating = entity.getRating();
        if (rating != null) {
            stmt.bindLong(6, rating);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(7, memo);
        }
    }

    @Override
    protected void attachEntity(MyMemo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MyMemo readEntity(Cursor cursor, int offset) {
        MyMemo entity = new MyMemo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // mountainId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // dateTimeFrom
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // dateTimeUntil
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // weather
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // rating
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // memo
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MyMemo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMountainId(cursor.getLong(offset + 1));
        entity.setDateTimeFrom(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setDateTimeUntil(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setWeather(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRating(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMemo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MyMemo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MyMemo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMountainDao().getAllColumns());
            builder.append(" FROM MY_MEMO T");
            builder.append(" LEFT JOIN MOUNTAIN T0 ON T.'MOUNTAIN_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected MyMemo loadCurrentDeep(Cursor cursor, boolean lock) {
        MyMemo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Mountain mountain = loadCurrentOther(daoSession.getMountainDao(), cursor, offset);
         if(mountain != null) {
            entity.setMountain(mountain);
        }

        return entity;    
    }

    public MyMemo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<MyMemo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<MyMemo> list = new ArrayList<MyMemo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<MyMemo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<MyMemo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

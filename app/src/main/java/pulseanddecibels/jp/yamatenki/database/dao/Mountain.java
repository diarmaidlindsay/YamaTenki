package pulseanddecibels.jp.yamatenki.database.dao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table MOUNTAIN.
 */
public class Mountain {

    private Long id;
    private String yid;
    private String title;
    private String kana;
    private long areaId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MountainDao myDao;

    private Area area;
    private Long area__resolvedKey;

    private List<Forecast> forecastList;

    public Mountain() {
    }

    public Mountain(Long id) {
        this.id = id;
    }

    public Mountain(Long id, String yid, String title, String kana, long areaId) {
        this.id = id;
        this.yid = yid;
        this.title = title;
        this.kana = kana;
        this.areaId = areaId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMountainDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getYid() {
        return yid;
    }

    public void setYid(String yid) {
        this.yid = yid;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getKana() {
        return kana;
    }

    public void setKana(String kana) {
        this.kana = kana;
    }

    public long getAreaId() {
        return areaId;
    }

    public void setAreaId(long areaId) {
        this.areaId = areaId;
    }

    /** To-one relationship, resolved on first access. */
    public Area getArea() {
        long __key = this.areaId;
        if (area__resolvedKey == null || !area__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AreaDao targetDao = daoSession.getAreaDao();
            Area areaNew = targetDao.load(__key);
            synchronized (this) {
                area = areaNew;
            	area__resolvedKey = __key;
            }
        }
        return area;
    }

    public void setArea(Area area) {
        if (area == null) {
            throw new DaoException("To-one property 'areaId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.area = area;
            areaId = area.getId();
            area__resolvedKey = areaId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Forecast> getForecastList() {
        if (forecastList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ForecastDao targetDao = daoSession.getForecastDao();
            List<Forecast> forecastListNew = targetDao._queryMountain_ForecastList(id);
            synchronized (this) {
                if(forecastList == null) {
                    forecastList = forecastListNew;
                }
            }
        }
        return forecastList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetForecastList() {
        forecastList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

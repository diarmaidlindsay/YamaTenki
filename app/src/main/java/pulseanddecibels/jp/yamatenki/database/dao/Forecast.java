package pulseanddecibels.jp.yamatenki.database.dao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table FORECAST.
 */
public class Forecast {

    private Long id;
    private Double temperature;
    private Double precipitation;
    private Double totalCloudCover;
    private Integer mountainStatus;
    private String dateTime;
    private Boolean daily;
    private long mountainId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ForecastDao myDao;

    private Mountain mountain;
    private Long mountain__resolvedKey;

    private List<WindAndTemperature> windAndTemperatureList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Forecast() {
    }

    public Forecast(Long id) {
        this.id = id;
    }

    public Forecast(Long id, Double temperature, Double precipitation, Double totalCloudCover, Integer mountainStatus, String dateTime, Boolean daily, long mountainId) {
        this.id = id;
        this.temperature = temperature;
        this.precipitation = precipitation;
        this.totalCloudCover = totalCloudCover;
        this.mountainStatus = mountainStatus;
        this.dateTime = dateTime;
        this.daily = daily;
        this.mountainId = mountainId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getForecastDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Double getTemperature() {
        return temperature;
    }

    public void setTemperature(Double temperature) {
        this.temperature = temperature;
    }

    public Double getPrecipitation() {
        return precipitation;
    }

    public void setPrecipitation(Double precipitation) {
        this.precipitation = precipitation;
    }

    public Double getTotalCloudCover() {
        return totalCloudCover;
    }

    public void setTotalCloudCover(Double totalCloudCover) {
        this.totalCloudCover = totalCloudCover;
    }

    public Integer getMountainStatus() {
        return mountainStatus;
    }

    public void setMountainStatus(Integer mountainStatus) {
        this.mountainStatus = mountainStatus;
    }

    public String getDateTime() {
        return dateTime;
    }

    public void setDateTime(String dateTime) {
        this.dateTime = dateTime;
    }

    public Boolean getDaily() {
        return daily;
    }

    public void setDaily(Boolean daily) {
        this.daily = daily;
    }

    public long getMountainId() {
        return mountainId;
    }

    public void setMountainId(long mountainId) {
        this.mountainId = mountainId;
    }

    /** To-one relationship, resolved on first access. */
    public Mountain getMountain() {
        long __key = this.mountainId;
        if (mountain__resolvedKey == null || !mountain__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MountainDao targetDao = daoSession.getMountainDao();
            Mountain mountainNew = targetDao.load(__key);
            synchronized (this) {
                mountain = mountainNew;
            	mountain__resolvedKey = __key;
            }
        }
        return mountain;
    }

    public void setMountain(Mountain mountain) {
        if (mountain == null) {
            throw new DaoException("To-one property 'mountainId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.mountain = mountain;
            mountainId = mountain.getId();
            mountain__resolvedKey = mountainId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<WindAndTemperature> getWindAndTemperatureList() {
        if (windAndTemperatureList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WindAndTemperatureDao targetDao = daoSession.getWindAndTemperatureDao();
            List<WindAndTemperature> windAndTemperatureListNew = targetDao._queryForecast_WindAndTemperatureList(id);
            synchronized (this) {
                if(windAndTemperatureList == null) {
                    windAndTemperatureList = windAndTemperatureListNew;
                }
            }
        }
        return windAndTemperatureList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetWindAndTemperatureList() {
        windAndTemperatureList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
